# -*- coding: utf-8 -*-
"""steamlit_sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10aFDnVPko2nQfeARtOPfbYLM3J2UDB8u
"""

import pandas as pd
import numpy as np
import streamlit as st  # pip install streamlit
import yfinance as yf   # pip install yfinance
from stocknews import StockNews # pip install stocknews
import plotly.express as px #!pip install pip install plotly-express
from alpha_vantage.fundamentaldata import FundamentalData #pip install alpha-vantage


#side bar

st.title('Stock Dashboard')
ticker = st.sidebar.text_input('Ticker')
start_date = st.sidebar.date_input('Start date')
end_date = st.sidebar.date_input('End date')

#download and plot chart
#to do: change the end date to 1 year time frame

data = yf.download(ticker, start=start_date, end=end_date)
fig = px.line(data, x=data.index, y=data['Adj Close'], title=ticker)
st.plotly_chart(fig)

#display inf

pricing_data, fundamental_data, news = st.tabs(["Price", "Fundamental Data", "Top 10 news"])
trading_date = 252

with pricing_data:
  st.header("Price Movements")
  data2 = data
  data2["% change"] = data["Adj Close"]/data["Adj Close"].shift(1) - 1
  data2.dropna(inplace=True)
  st.write(data2)
  annual_return = data2["% change"].mean()*trading_date*100
  st.write("Annual_return:", annual_return,"%")
  stdev = np.std(data2['% change'])*np.sqrt(trading_date)
  st.write("Standard Deviation:", stdev*100,"%")
  st.write("1-year-return mean:", data2["% change"].mean())
  st.write("Risk Adjusted return:", annual_return/(stdev*100))

with news:
  st.header(f"News of {ticker}")
  sn = StockNews(ticker, save_news=False)
  df_news = sn.read_rss()
  for i in range(10):
    st.subheader(f'News {i+1}')
    st.write(df_news['published'][i])
    st.write(df_news['title'][i])
    st.write(df_news['summary'][i])
    title_sentiment = df_news['sentiment_title'][i]
    st.write(f'Title Sentiment {title_sentiment}')
    news_sentiment = df_news['sentiment_summary'][i]
    st.write(f'News Sentiment {news_sentiment}')

with fundamental_data:
  key = "43OTW409OLX93FWD"  #get a key here: https://www.alphavantage.co/support/#api-key
  fd = FundamentalData(key, output_format = "pandas")
  st.subheader("Balance Sheet")
  balance_sheet = fd.get_balance_sheet_annual(ticker)[0]
  bs = balance_sheet.T[2:]
  bs.columns = list(balance_sheet.T.iloc[0])
  st.write(bs)
  st.subheader('Income Statement')
  income_statement = fd.get_income_statement_annual(ticker)[0]
  is1 = income_statement.T[2:]
  is1.columns = list(income_statement.T.iloc[0])
  st.write(is1)
  st.subheader("Cash Flow Statement")
  cash_flow = fd.get_cash_flow_annual(ticker)[0]
  cf = cash_flow.T[2:]
  cf.colums = list(cash_flow.T.iloc[0])
  st.write(cf)